<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>binary-search on Xuan</title>
    <link>https://func.fun/tags/binary-search/</link>
    <description>Recent content in binary-search on Xuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Jan 2022 13:25:31 +0800</lastBuildDate><atom:link href="https://func.fun/tags/binary-search/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>34.find-first-and-last-position-of-element-in-sorted-array</title>
      <link>https://func.fun/cn/34.find-first-and-last-position-of-element-in-sorted-array/</link>
      <pubDate>Fri, 21 Jan 2022 13:25:31 +0800</pubDate>
      
      <guid>https://func.fun/cn/34.find-first-and-last-position-of-element-in-sorted-array/</guid>
      <description>Description 力扣
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。 如果数组中不存在目标值 target，返回 [-1, -1]。 进阶： 你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？ 示例 1： 输入：nums = [5,7,7,8,8,10], target = 8 输出：[3,4] 示例 2： 输入：nums = [5,7,7,8,8,10], target = 6 输出：[-1,-1] 示例 3： 输入：nums = [], target = 0 输出：[-1,-1] 提示： 0 &amp;lt;= nums.length &amp;lt;= 105 -109 &amp;lt;= nums[i] &amp;lt;= 109 nums 是一个非递减数组 -109 &amp;lt;= target &amp;lt;= 109 Solution 这里都用左右闭合的方法。 简单版思路清晰一些，两段二分代码分别找rightBorder和leftBorder。 复杂版，一段二分代码。 这两种方案都是进行了两次二分查找。 关键在于nums[mid]=target的情况下的条件处理，向右逼近得leftBorder，向左逼近得rightBorder。 [1,2,3,4,5,5,5,6,7,8]
比如 left = 1， right = 7， mid = 4 nums[mid] == nums[4] == 5 == target 如果要查找leftBorder， 则 right = mid - 1 = 4 leftBorder = right = 4 or leftBorder = mid = 5 下一步 left &amp;lt;= right (1 &amp;lt;= 4)还未跳出循环 mid = 2 nums[mid] == nums[2] == 3 &amp;lt; target left = mid + 1 = 3 下一步 left &amp;lt;= right (3 &amp;lt;= 4)还未跳出循环 mid = 3 nums[mid] == nums[3] == 4 &amp;lt; target left = mid + 1 = 4 下一步 left &amp;lt;= right (4 &amp;lt;= 4)还未跳出循环 mid = 4 nums[mid] == nums[4] == 5 = target 如果要查找leftBorder， 则 right = mid - 1 = 3 leftBorder = right = 3 or leftBorder = mid = 4 下一步 跳出循环 return leftBorder+1 = 4 or leftBorder = 4 简单法 class Solution { int[] searchRange(int[] nums, int target) { int rightBorder = getRightBorder(nums, target); int leftBorder = getLeftBorder(nums, target); if (rightBorder == -2 || leftBorder == -2) return new int[]{-1,-1}; else if (rightBorder - leftBorder &amp;gt; 1) return new int[]{leftBorder+1, rightBorder-1}; else return new int[]{-1,-1}; } int getRightBorder(int[] nums, int target) { int left = 0; int right = nums.</description>
    </item>
    
    <item>
      <title>34.find-first-and-last-position-of-element-in-sorted-array</title>
      <link>https://func.fun/posts/34.find-first-and-last-position-of-element-in-sorted-array/</link>
      <pubDate>Fri, 21 Jan 2022 13:25:31 +0800</pubDate>
      
      <guid>https://func.fun/posts/34.find-first-and-last-position-of-element-in-sorted-array/</guid>
      <description>Description 力扣
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。 如果数组中不存在目标值 target，返回 [-1, -1]。 进阶： 你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？ 示例 1： 输入：nums = [5,7,7,8,8,10], target = 8 输出：[3,4] 示例 2： 输入：nums = [5,7,7,8,8,10], target = 6 输出：[-1,-1] 示例 3： 输入：nums = [], target = 0 输出：[-1,-1] 提示： 0 &amp;lt;= nums.length &amp;lt;= 105 -109 &amp;lt;= nums[i] &amp;lt;= 109 nums 是一个非递减数组 -109 &amp;lt;= target &amp;lt;= 109 Solution 这里都用左右闭合的方法。 简单版思路清晰一些，两段二分代码分别找rightBorder和leftBorder。 复杂版，一段二分代码。 这两种方案都是进行了两次二分查找。 关键在于nums[mid]=target的情况下的条件处理，向右逼近得leftBorder，向左逼近得rightBorder。 [1,2,3,4,5,5,5,6,7,8]
比如 left = 1， right = 7， mid = 4 nums[mid] == nums[4] == 5 == target 如果要查找leftBorder， 则 right = mid - 1 = 4 leftBorder = right = 4 or leftBorder = mid = 5 下一步 left &amp;lt;= right (1 &amp;lt;= 4)还未跳出循环 mid = 2 nums[mid] == nums[2] == 3 &amp;lt; target left = mid + 1 = 3 下一步 left &amp;lt;= right (3 &amp;lt;= 4)还未跳出循环 mid = 3 nums[mid] == nums[3] == 4 &amp;lt; target left = mid + 1 = 4 下一步 left &amp;lt;= right (4 &amp;lt;= 4)还未跳出循环 mid = 4 nums[mid] == nums[4] == 5 = target 如果要查找leftBorder， 则 right = mid - 1 = 3 leftBorder = right = 3 or leftBorder = mid = 4 下一步 跳出循环 return leftBorder+1 = 4 or leftBorder = 4 简单法 class Solution { int[] searchRange(int[] nums, int target) { int rightBorder = getRightBorder(nums, target); int leftBorder = getLeftBorder(nums, target); if (rightBorder == -2 || leftBorder == -2) return new int[]{-1,-1}; else if (rightBorder - leftBorder &amp;gt; 1) return new int[]{leftBorder+1, rightBorder-1}; else return new int[]{-1,-1}; } int getRightBorder(int[] nums, int target) { int left = 0; int right = nums.</description>
    </item>
    
    <item>
      <title>35.search-insert-position</title>
      <link>https://func.fun/cn/35.search-insert-position/</link>
      <pubDate>Thu, 06 Jan 2022 12:53:31 +0800</pubDate>
      
      <guid>https://func.fun/cn/35.search-insert-position/</guid>
      <description>Description 力扣
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。 请必须使用时间复杂度为 O(log n) 的算法。 示例 1: 输入: nums = [1,3,5,6], target = 5 输出: 2 示例 2: 输入: nums = [1,3,5,6], target = 2 输出: 1 示例 3: 输入: nums = [1,3,5,6], target = 7 输出: 4 示例 4: 输入: nums = [1,3,5,6], target = 0 输出: 0 示例 5: 输入: nums = [1], target = 0 输出: 0 提示: 1 &amp;lt;= nums.length &amp;lt;= 104 -104 &amp;lt;= nums[i] &amp;lt;= 104 nums 为无重复元素的升序排列数组 -104 &amp;lt;= target &amp;lt;= 104 Solution 用二分的前提是升序且不重复。 需要注意边界条件的细节。 全闭能等，存在时右闭减开不减。不存在时右闭加右开不加。 左右闭合 [left, right] -&amp;gt; 都能取到，所以left 从 第一个下标（0）开始，right 从最后一个下标开始（nums.</description>
    </item>
    
    <item>
      <title>35.search-insert-position</title>
      <link>https://func.fun/posts/35.search-insert-position/</link>
      <pubDate>Thu, 06 Jan 2022 12:53:31 +0800</pubDate>
      
      <guid>https://func.fun/posts/35.search-insert-position/</guid>
      <description>Description 力扣
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。 请必须使用时间复杂度为 O(log n) 的算法。 示例 1: 输入: nums = [1,3,5,6], target = 5 输出: 2 示例 2: 输入: nums = [1,3,5,6], target = 2 输出: 1 示例 3: 输入: nums = [1,3,5,6], target = 7 输出: 4 示例 4: 输入: nums = [1,3,5,6], target = 0 输出: 0 示例 5: 输入: nums = [1], target = 0 输出: 0 提示: 1 &amp;lt;= nums.length &amp;lt;= 104 -104 &amp;lt;= nums[i] &amp;lt;= 104 nums 为无重复元素的升序排列数组 -104 &amp;lt;= target &amp;lt;= 104 Solution 用二分的前提是升序且不重复。 需要注意边界条件的细节。 全闭能等，存在时右闭减开不减。不存在时右闭加右开不加。 左右闭合 [left, right] -&amp;gt; 都能取到，所以left 从 第一个下标（0）开始，right 从最后一个下标开始（nums.</description>
    </item>
    
    <item>
      <title>704.binary-search</title>
      <link>https://func.fun/cn/704.binary-search/</link>
      <pubDate>Wed, 08 Dec 2021 12:25:36 +0800</pubDate>
      
      <guid>https://func.fun/cn/704.binary-search/</guid>
      <description>Description 力扣
给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 示例 1: 输入: nums = [-1,0,3,5,9,12], target = 9 输出: 4 解释: 9 出现在 nums 中并且下标为 4 示例 2: 输入: nums = [-1,0,3,5,9,12], target = 2 输出: -1 解释: 2 不存在 nums 中因此返回 -1 提示： 你可以假设 nums 中的所有元素是不重复的。 n 将在 [1, 10000]之间。 nums 的每个元素都将在 [-9999, 9999]之间。 Solution 用二分的前提是升序且不重复。 需要注意边界条件的细节。 全闭能等，右闭减开不减。 左右闭合 [left, right] -&amp;gt; 都能取到，所以left 从 第一个下标（0）开始，right 从最后一个下标开始（nums.</description>
    </item>
    
    <item>
      <title>704.binary-search</title>
      <link>https://func.fun/posts/704.binary-search/</link>
      <pubDate>Wed, 08 Dec 2021 12:25:36 +0800</pubDate>
      
      <guid>https://func.fun/posts/704.binary-search/</guid>
      <description>Description 力扣
给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 示例 1: 输入: nums = [-1,0,3,5,9,12], target = 9 输出: 4 解释: 9 出现在 nums 中并且下标为 4 示例 2: 输入: nums = [-1,0,3,5,9,12], target = 2 输出: -1 解释: 2 不存在 nums 中因此返回 -1 提示： 你可以假设 nums 中的所有元素是不重复的。 n 将在 [1, 10000]之间。 nums 的每个元素都将在 [-9999, 9999]之间。 Solution 用二分的前提是升序且不重复。 需要注意边界条件的细节。 全闭能等，右闭减开不减。 左右闭合 [left, right] -&amp;gt; 都能取到，所以left 从 第一个下标（0）开始，right 从最后一个下标开始（nums.</description>
    </item>
    
  </channel>
</rss>
