<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Thunsis</title>
		<link>https://Thunsis.github.io/posts/</link>
		<description>Recent content in Posts on Thunsis</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 17 Mar 2021 17:50:51 +0800</lastBuildDate>
		<atom:link href="https://Thunsis.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>How to handle mutiple git accounts in same laptop</title>
			<link>https://Thunsis.github.io/posts/mutiple_gits/</link>
			<pubDate>Wed, 17 Mar 2021 17:50:51 +0800</pubDate>
			
			<guid>https://Thunsis.github.io/posts/mutiple_gits/</guid>
			<description>It’s quite easy if we only have one git account, then it became confusing when we want to add more account. I also met this problem. But I have found out solutions so let me show how to handle it.
You should know the difference between git and github. github is one kind of git, and git have many website name such as gitlab, gitee… So there are the following two situations.</description>
			<content type="html"><![CDATA[<p>It’s quite easy if we only have one git account, then it became confusing when we want to add more account. I also met this problem. But I have found out solutions so let me show how to handle it.</p>
<p>You should know the difference between git and github. github is one kind of git, and git have many website name such as gitlab, gitee… So there are the following two situations. however you can consider it as other 2 situations: same email or not. P.S. Local environment will be automatically adjusted by user.name, user.email and repo url.</p>
<ul>
<li>different git website accounts
for example: a.github.com and b.gitlab.com</li>
<li>same git website accounts
for example: a.github.com and b.github.com</li>
</ul>
<h2 id="ssh">SSH</h2>
<p>In the beginning, there is a base knowledge we need to be aware of.
SSH is a authorization tool. It is a bridge connecting mutiple network servers. And abviously if we want to update a git repo, a trusted connection is needed. So we need to use SSH to generate public key and private key, and copy public key to website setting page. And add basic information of website to .ssh/config. So that we are trusted and can continue doing pull or push operations.</p>
<h3 id="let-generate-ssh-keys-for-different-emails">Let generate ssh keys for different emails</h3>
<p>Notice: email number = ssh key number
If github and gitlab is registered by same email, then it can use same ssh key. Otherwise you are supposed to create new ssh keys and add them to website setting page accordingly.</p>
<pre><code>ssh-keygen -t rsa -C &quot;CompanyEmailNameA@xxx.com&quot; -f ~/.ssh/company_name_rsa
ssh-keygen -t rsa -C &quot;SelfEmailNameA@xxx.com&quot; -f ~/.ssh/self_name_rsa
</code></pre><h3 id="update-different-ssh-keys-config">Update different ssh key’s config</h3>
<p>Accounts of different website:</p>
<pre><code>vi ~/.ssh/config

Host self_name
Hostname github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/company_name_rsa
User self_github_account_name
  
Host self_name
Hostname gitlab.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/self_name_rsa
User self_gitlab_account_name
</code></pre><p>Accounts of same website:</p>
<pre><code>vi ~/.ssh/config

Host company_name
Hostname github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/company_name_rsa
User company_github_account_name
  
Host self_name
Hostname github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/self_name_rsa
User self_github_account_name
</code></pre><h3 id="copy-public-key-to-website-setting-page">Copy public key to website setting page</h3>
<h2 id="git-config">Git config</h2>
<pre><code>git config user.name &quot;self_github_account_name&quot;
git config user.email SelfEmailNameA@xxx.com
</code></pre><p>That should be enough.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The process from one to many is the process of deepening understanding.</p>
]]></content>
		</item>
		
		<item>
			<title>Setup static github.io blog engined by hugo &amp; hermit on Mac</title>
			<link>https://Thunsis.github.io/posts/blog_setup/</link>
			<pubDate>Fri, 12 Mar 2021 16:04:53 +0800</pubDate>
			
			<guid>https://Thunsis.github.io/posts/blog_setup/</guid>
			<description>My thoughts I always wanted to setup a blog and keep updating the best practice which I learned from work(in eBay) and self study. It may be helpful by other peoples who met issue and clicked into this page. I would be very proud of this.
We used to search on the internet when we are facing issues. We keep digging and digging, trying again and again to resolve problems. A common case is many blogs are just pasted from anothor, that is very time wasting once we realised.</description>
			<content type="html"><![CDATA[<h2 id="my-thoughts">My thoughts</h2>
<p>I always wanted to setup a blog and keep updating the best practice which I learned from work(in eBay) and self study. It may be helpful by other peoples who met issue and clicked into this page. I would be very proud of this.</p>
<p>We used to search on the internet when we are facing issues. We keep digging and digging, trying again and again to resolve problems. A common case is many blogs are just pasted from anothor, that is very time wasting once we realised. So I will always write original blogs, and don’t forget the initial purpose.</p>
<p>Now let me begin recording my struggling blog build road. I had to say the quick_start part in hugo document is not friendly… The blank site on localhost:1313 drives me crazy..</p>
<h2 id="install-hugo">Install <code>hugo</code></h2>
<h3 id="hugo">hugo</h3>
<pre><code>brew install hugo
</code></pre><h2 id="create-site-and-add-your-favorate-theme">Create site and add your favorate theme</h2>
<p>create main folder by hugo new command.</p>
<pre><code>hugo new site your_site_name
</code></pre><p>cd your_site_name, then clone your favorate hugo them into themes/.</p>
<pre><code>cd your_site_name
git clone https://github.com/Track3/hermit.git themes/hermit
</code></pre><p>create some web pages in .md format, following commands will automatically generate subfolder names <em>posts</em> and <em>about</em>.</p>
<pre><code>hugo new posts/my-first-post.md
hugo new about/about.md
</code></pre><p>Ather this, hugo ducument says <code>hugo server -D</code>
But I saw nothing when opened http://localhost:1313/.
After a huge struggling, I finally saw the contents.</p>
<p>Needed actions are:</p>
<ol>
<li>Remove draft line in *.md you just created, hugo won’t deploy drafts unless you append this command <code>--buildDrafts</code>.
However, after I made change accordingly, website still is blank.</li>
<li>Copy <code>config.toml</code>  from your <code>themes/theme_name/exampleSite</code>folder to your site main folder. And modify some customer settings, I am only listing necessary parts:</li>
</ol>
<pre><code>baseURL = &quot;https://Thunsis.github.io&quot;
# your github.io url
theme = &quot;hermit&quot;
# them name
[menu]

  [[menu.main]]
    name = &quot;Posts&quot;
    url = &quot;posts/&quot;
    weight = 10

  [[menu.main]]
    name = &quot;About&quot;
    url = &quot;about/&quot;
    weight = 20
# menu stucture, need to be aligned with /content/ subfolders you created
</code></pre><p>Now you can see the website by, congratulations!</p>
<pre><code>hugo server -D
</code></pre><h2 id="deploy-to-github-repo">Deploy to github repo</h2>
<p>We have get blog ready in localhost, but there still a way to go.. Carry on!</p>
<h3 id="create-your_namegithubio-repo-and-configure-it">Create your_name.github.io repo and configure it</h3>
<p>I won’t go into details on creating repo names <code>your_name.github.io</code>, there is an important action need, which is to create a file names <code>.github/workflows/gh-pages.yml</code> under your just created repo. The content should be:</p>
<pre><code>name: github pages

on:
  push:
    branches:
      - main  # Set a branch to deploy

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          # extended: true

      - name: Build
        run: hugo --minify

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
</code></pre><h3 id="generate-static-files-and-push-to-repo">Generate static files and push to repo</h3>
<p>After this command, static files will be generated to hugo project subfolder names <em>public</em>. Which is the exact content we need to deploy to github repo.</p>
<pre><code>hugo
</code></pre><p>Now we push it into repo.</p>
<pre><code>cd public
git init
git remote add origin https://github.com/Thunsis/Thunsis.github.io.git
git config user.name &quot;self_github_account_name&quot;
git config user.email SelfEmailNameA@xxx.com
git pull
git checkout master
git branch --set-upstream-to=origin/master
git add .
git commit -a -m 'my blog'
git push -u origin master
</code></pre><p>See you blog on <code>http://your_name.github.io/</code>, cheers!</p>
<h2 id="conclusion">Conclusion</h2>
<h3 id="the-mosting-blocking-issues">The mosting blocking issues:</h3>
<ul>
<li>hugo document did not tell us to overwrite  <code>config.toml</code> by theme’s, which caused I can’t see the content.</li>
<li>Muti github account issue(personal issue). But I have found best solution, will post another blog to summary that. I think it could be helpful by some people, because most of us have company github account and personal github account both on same laptop.</li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
