<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on funcfun</title>
		<link>https://func.fun/posts/</link>
		<description>Recent content in Posts on funcfun</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 21 Jan 2022 17:40:51 +0800</lastBuildDate>
		<atom:link href="https://func.fun/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>26.remove-duplicates-from-sorted-array</title>
			<link>https://func.fun/posts/26.remove-duplicates-from-sorted-array/</link>
			<pubDate>Fri, 21 Jan 2022 17:40:51 +0800</pubDate>
			
			<guid>https://func.fun/posts/26.remove-duplicates-from-sorted-array/</guid>
			<description>Description 力扣 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。 不要使用额外的数组空间，你必须在 原地 修改</description>
			<content type="html"><![CDATA[<h2 id="description">Description</h2>
<p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">力扣</a></p>
<pre><code>给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

 

说明:

为什么返回数值是整数，但输出的答案是数组呢?

请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

你可以想象内部操作如下:

// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
for (int i = 0; i &lt; len; i++) {
    print(nums[i]);
}
 
示例 1：

输入：nums = [1,1,2]
输出：2, nums = [1,2]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
示例 2：

输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4]
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。
 

提示：

0 &lt;= nums.length &lt;= 3 * 104
-104 &lt;= nums[i] &lt;= 104
nums 已按升序排列
</code></pre><h2 id="solution">Solution</h2>
<ol>
<li>首先注意数组为空时的判断。</li>
<li>是<a href="https://func.fun/posts/27.remove-element/">27.remove-element</a>的进阶版，区别在于<strong>27</strong>为nums[i]和目标值做比较，<strong>26</strong>为nums[i]和nums[j]做比较。</li>
</ol>
<h3 id="双指针法">双指针法</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">removeDuplicates</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">nums</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">!=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
                <span class="n">nums</span><span class="o">[++</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">++</span><span class="n">j</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="notice-points">Notice points</h2>
<ol>
<li><code>return i++</code> 等同于</li>
</ol>
<pre><code>int temp = i;
i = i + 1;
return temp;
</code></pre><ol start="2">
<li><code>return ++i</code> 等同于</li>
</ol>
<pre><code>i = i + 1;
return i;
</code></pre><ul>
<li>i++ 返回原来的值（临时变量），++i 返回加1后的值。</li>
<li>i++ 不能作为左值，而++i 可以。左值是对应内存中有确定存储地址的对象的表达式的值，而右值是所有不是左值的表达式的值。</li>
</ul>
<p>实现方法：</p>
<pre><code>// 前缀形式： 
int&amp; int::operator++() //这里返回的是一个引用形式，就是说函数返回值也可以作为一个左值使用 
{//函数本身无参，意味着是在自身空间内增加1的 
	*this += 1; // 增加 
	return *this; // 取回值 
} 

//后缀形式: 
const int int::operator++(int) //函数返回值是一个非左值型的，与前缀形式的差别所在。 
{//函数带参，说明有另外的空间开辟 
	int oldValue = *this; // 取回值 
	++(*this); // 增加 
	return oldValue; // 返回被取回的值 
}

</code></pre>]]></content>
		</item>
		
		<item>
			<title>27.remove-element</title>
			<link>https://func.fun/posts/27.remove-element/</link>
			<pubDate>Fri, 21 Jan 2022 16:18:51 +0800</pubDate>
			
			<guid>https://func.fun/posts/27.remove-element/</guid>
			<description>Description 力扣 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。 不要使用额外的数组空间，你必须仅使用 O(1) 额外</description>
			<content type="html"><![CDATA[<h2 id="description">Description</h2>
<p><a href="https://leetcode-cn.com/problems/remove-element/">力扣</a></p>
<pre><code>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

 

说明:

为什么返回数值是整数，但输出的答案是数组呢?

请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

你可以想象内部操作如下:

// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝
int len = removeElement(nums, val);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
for (int i = 0; i &lt; len; i++) {
    print(nums[i]);
}
 

示例 1：

输入：nums = [3,2,2,3], val = 3
输出：2, nums = [2,2]
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。
示例 2：

输入：nums = [0,1,2,2,3,0,4,2], val = 2
输出：5, nums = [0,1,4,0,3]
解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。
 

提示：

0 &lt;= nums.length &lt;= 100
0 &lt;= nums[i] &lt;= 50
0 &lt;= val &lt;= 100
</code></pre><h2 id="solution">Solution</h2>
<ol>
<li>数组是由连续的存储单元组成的，所以不能直接删除，只能覆盖。</li>
<li>另外要求存储空间为O(1)，所以需要在数组本身进行覆盖。</li>
<li>很多算法都可以首先考虑一下暴力接法，但我更倾向于直面每道题考查的知识点，这个过程不是为了做题，而是为了学解题技巧。</li>
</ol>
<h3 id="双指针法">双指针法</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">removeElement</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">val</span><span class="o">){</span>
                <span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">++</span><span class="n">j</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>34.find-first-and-last-position-of-element-in-sorted-array</title>
			<link>https://func.fun/posts/34.find-first-and-last-position-of-element-in-sorted-array/</link>
			<pubDate>Fri, 21 Jan 2022 13:25:31 +0800</pubDate>
			
			<guid>https://func.fun/posts/34.find-first-and-last-position-of-element-in-sorted-array/</guid>
			<description>Description 力扣 给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。 如果数组中不存在目标值 t</description>
			<content type="html"><![CDATA[<h2 id="description">Description</h2>
<p><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">力扣</a></p>
<pre><code>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

如果数组中不存在目标值 target，返回 [-1, -1]。

进阶：

你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？
 

示例 1：

输入：nums = [5,7,7,8,8,10], target = 8
输出：[3,4]
示例 2：

输入：nums = [5,7,7,8,8,10], target = 6
输出：[-1,-1]
示例 3：

输入：nums = [], target = 0
输出：[-1,-1]
 

提示：

0 &lt;= nums.length &lt;= 105
-109 &lt;= nums[i] &lt;= 109
nums 是一个非递减数组
-109 &lt;= target &lt;= 109
</code></pre><h2 id="solution">Solution</h2>
<ol>
<li>这里都用左右闭合的方法。</li>
<li>简单版思路清晰一些，两段二分代码分别找rightBorder和leftBorder。</li>
<li>复杂版，一段二分代码。</li>
<li>这两种方案都是进行了两次二分查找。</li>
<li>关键在于nums[mid]=target的情况下的条件处理，向右逼近得leftBorder，向左逼近得rightBorder。</li>
</ol>
<p>[1,2,3,4,5,5,5,6,7,8]</p>
<ul>
<li>比如 left = 1， right = 7， mid = 4</li>
<li>nums[mid] == nums[4] == 5 == target</li>
<li>如果要查找leftBorder， 则 right = mid - 1 = 4</li>
<li>leftBorder = right = 4 or leftBorder = mid = 5</li>
<li>下一步 left &lt;= right (1 &lt;= 4)还未跳出循环</li>
<li>mid = 2</li>
<li>nums[mid] == nums[2] == 3 &lt; target</li>
<li>left = mid + 1 = 3</li>
<li>下一步 left &lt;= right (3 &lt;= 4)还未跳出循环</li>
<li>mid = 3</li>
<li>nums[mid] == nums[3] == 4 &lt; target</li>
<li>left = mid + 1 = 4</li>
<li>下一步 left &lt;= right (4 &lt;= 4)还未跳出循环</li>
<li>mid = 4</li>
<li>nums[mid] == nums[4] == 5 = target</li>
<li>如果要查找leftBorder， 则 right = mid - 1 = 3</li>
<li>leftBorder = right = 3 or leftBorder = mid = 4</li>
<li>下一步 跳出循环</li>
<li>return leftBorder+1 = 4 or leftBorder = 4</li>
</ul>
<h3 id="简单法">简单法</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>

    <span class="kt">int</span><span class="o">[]</span> <span class="nf">searchRange</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">rightBorder</span> <span class="o">=</span> <span class="n">getRightBorder</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">target</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">leftBorder</span> <span class="o">=</span> <span class="n">getLeftBorder</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">target</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">rightBorder</span> <span class="o">==</span> <span class="o">-</span><span class="n">2</span> <span class="o">||</span> <span class="n">leftBorder</span> <span class="o">==</span> <span class="o">-</span><span class="n">2</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{-</span><span class="n">1</span><span class="o">,-</span><span class="n">1</span><span class="o">};</span>
        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">rightBorder</span> <span class="o">-</span> <span class="n">leftBorder</span> <span class="o">&gt;</span> <span class="n">1</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">leftBorder</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">rightBorder</span><span class="o">-</span><span class="n">1</span><span class="o">};</span> 
        <span class="k">else</span> <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{-</span><span class="n">1</span><span class="o">,-</span><span class="n">1</span><span class="o">};</span>
    <span class="o">}</span>
    

    <span class="kt">int</span> <span class="nf">getRightBorder</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">rightBorder</span> <span class="o">=</span> <span class="o">-</span><span class="n">2</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">){</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
                <span class="n">rightBorder</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">rightBorder</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kt">int</span> <span class="nf">getLeftBorder</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">leftBorder</span> <span class="o">=</span> <span class="o">-</span><span class="n">2</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">){</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
                <span class="n">leftBorder</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">leftBorder</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">};</span>

</code></pre></div><h3 id="复杂法">复杂法</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">searchRange</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{-</span><span class="n">1</span><span class="o">,</span> <span class="o">-</span><span class="n">1</span><span class="o">};</span>
        <span class="n">res</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">binarySearch</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
        <span class="n">res</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">binarySearch</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">//leftOrRight为true找左边界 false找右边界
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">binarySearch</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">leftOrRight</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">,</span> <span class="n">mid</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)</span> <span class="o">/</span> <span class="n">2</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">target</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
            <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">target</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="n">res</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
                <span class="c1">//处理target == nums[mid]
</span><span class="c1"></span>                <span class="k">if</span><span class="o">(</span><span class="n">leftOrRight</span><span class="o">)</span>
                    <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
                <span class="k">else</span>
                    <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Bind github.io with your custom domain</title>
			<link>https://func.fun/posts/bind_domain/</link>
			<pubDate>Tue, 18 Jan 2022 17:12:25 +0800</pubDate>
			
			<guid>https://func.fun/posts/bind_domain/</guid>
			<description>添加2条域名解析： CNAME - @ - your.github.io CNAME - www - your.github.io 在 你的网站仓库的设置里 填写Custom domain 为 你的域名（不加任何http(s)/www那种），解析完成后勾</description>
			<content type="html"><![CDATA[<ul>
<li>添加2条域名解析：
<ol>
<li>CNAME - @ - your.github.io</li>
<li>CNAME - www - your.github.io</li>
</ol>
</li>
<li>在 <a href="https://github.com/Thunsis/Thunsis.github.io/settings/pages">你的网站仓库的设置里</a> 填写<strong>Custom domain</strong>
为 你的域名（不加任何http(s)/www那种），解析完成后勾选<strong>Enforce HTTPS</strong>。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>35.search-insert-position</title>
			<link>https://func.fun/posts/35.search-insert-position/</link>
			<pubDate>Thu, 06 Jan 2022 12:53:31 +0800</pubDate>
			
			<guid>https://func.fun/posts/35.search-insert-position/</guid>
			<description>Description 力扣 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。 请必须使用时间</description>
			<content type="html"><![CDATA[<h2 id="description">Description</h2>
<p><a href="https://leetcode-cn.com/problems/search-insert-position/">力扣</a></p>
<pre><code>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

请必须使用时间复杂度为 O(log n) 的算法。

 

示例 1:

输入: nums = [1,3,5,6], target = 5
输出: 2
示例 2:

输入: nums = [1,3,5,6], target = 2
输出: 1
示例 3:

输入: nums = [1,3,5,6], target = 7
输出: 4
示例 4:

输入: nums = [1,3,5,6], target = 0
输出: 0
示例 5:

输入: nums = [1], target = 0
输出: 0
 

提示:

1 &lt;= nums.length &lt;= 104
-104 &lt;= nums[i] &lt;= 104
nums 为无重复元素的升序排列数组
-104 &lt;= target &lt;= 104
</code></pre><h2 id="solution">Solution</h2>
<ol>
<li>用二分的前提是升序且不重复。</li>
<li>需要注意边界条件的细节。</li>
<li>全闭能等，存在时右闭减开不减。不存在时右闭加右开不加。</li>
</ol>
<h3 id="左右闭合">左右闭合</h3>
<ol>
<li>[left, right] -&gt; 都能取到，所以left 从 第一个下标（0）开始，right 从最后一个下标开始（nums.length - 1）。</li>
<li>left 和 right 可能会相等，所以while 条件里是 &lt;=。</li>
<li>因为左右皆闭合，如果nums[middle] &lt;&gt; target, 左右需要加减1。</li>
<li>如果数组里不存在，插入的位置为right加1。</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">searchInsert</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">){</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">){</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">middle</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">right</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="左闭右开">左闭右开</h3>
<ol>
<li>[left, right) -&gt; right 需要超出边界1位，所以left 从 第一个下标（0）开始，right 从最后一个下标+1开始（nums.length ）。</li>
<li>left 和 right 不可能相等，所以while 条件里是 &lt;。</li>
<li>因为左闭右开，如果nums[middle] &lt;&gt; target, 左需要加1，右不需要减1。</li>
<li>如果数组里不存在，插入的位置为right。</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">searchInsert</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">){</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">middle</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">){</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">middle</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">right</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="notice-points">Notice Points</h2>
<p>和<a href="https://thunsis.github.io/posts/704.binary-search/">704.binary-search</a>的区别是多考虑了不在数组内的情况，在right的基础上，右闭加右开不加即可。
在二分查找中，坚持循环区间开闭的不变量。</p>
]]></content>
		</item>
		
		<item>
			<title>704.binary-search</title>
			<link>https://func.fun/posts/704.binary-search/</link>
			<pubDate>Wed, 08 Dec 2021 12:25:36 +0800</pubDate>
			
			<guid>https://func.fun/posts/704.binary-search/</guid>
			<description>Description 力扣 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 示例 1:</description>
			<content type="html"><![CDATA[<h2 id="description">Description</h2>
<p><a href="https://leetcode-cn.com/problems/binary-search/solution/">力扣</a></p>
<pre><code>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。


示例 1:

输入: nums = [-1,0,3,5,9,12], target = 9
输出: 4
解释: 9 出现在 nums 中并且下标为 4
示例 2:

输入: nums = [-1,0,3,5,9,12], target = 2
输出: -1
解释: 2 不存在 nums 中因此返回 -1
 

提示：

你可以假设 nums 中的所有元素是不重复的。
n 将在 [1, 10000]之间。
nums 的每个元素都将在 [-9999, 9999]之间。
</code></pre><h2 id="solution">Solution</h2>
<ol>
<li>用二分的前提是升序且不重复。</li>
<li>需要注意边界条件的细节。</li>
<li>全闭能等，右闭减开不减。</li>
</ol>
<h3 id="左右闭合">左右闭合</h3>
<ol>
<li>[left, right] -&gt; 都能取到，所以left 从 第一个下标（0）开始，right 从最后一个下标开始（nums.length - 1）。</li>
<li>left 和 right 可能会相等，所以while 条件里是 &lt;=。</li>
<li>因为左右皆闭合，如果nums[middle] &lt;&gt; target, 左右需要加减1。</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">search</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)</span> <span class="o">/</span> <span class="n">2</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">){</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">-</span><span class="n">1</span> <span class="o">;</span>
            <span class="o">}</span> 
            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">){</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">middle</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">};</span>
</code></pre></div><h3 id="左闭右开">左闭右开</h3>
<ol>
<li>[left, right) -&gt; right 需要超出边界1位，所以left 从 第一个下标（0）开始，right 从最后一个下标+1开始（nums.length ）。</li>
<li>left 和 right 不可能相等，所以while 条件里是 &lt;。</li>
<li>因为左闭右开，如果nums[middle] &lt;&gt; target, 左需要加1，右不需要减1。</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">search</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)</span> <span class="o">/</span> <span class="n">2</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">){</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">;</span>
            <span class="o">}</span> 
            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">){</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">middle</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">};</span>
</code></pre></div><h2 id="notice-points">Notice Points</h2>
<p>关于计算长度的几个方法</p>
<ul>
<li>length : <strong>Arrays</strong> (int[], double[], String[]) — 取得Array的长度</li>
<li>length() : <strong>String related Object</strong>(String, StringBuilder, etc) — 取得字符串的长度</li>
<li>size() : <strong>Collection Object</strong> (ArrayList, Set, etc) — 取得泛型集合大小</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span><span class="o">{</span>
     <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span><span class="n">args</span><span class="o">){</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">};</span>
        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;123456&#34;</span><span class="o">;</span>
        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">();</span>
        <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;example&#34;</span><span class="o">);</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">);</span> <span class="c1">//3
</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">());</span> <span class="c1">//6
</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">size</span><span class="o">());</span> <span class="c1">//1
</span><span class="c1"></span>     <span class="o">}</span>
<span class="o">}</span>

</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>How to handle mutiple git accounts in same laptop</title>
			<link>https://func.fun/posts/mutiple_gits/</link>
			<pubDate>Wed, 17 Mar 2021 17:50:51 +0800</pubDate>
			
			<guid>https://func.fun/posts/mutiple_gits/</guid>
			<description>It’s quite easy if we only have one git account, then it became confusing when we want to add more account. I also met this problem. But I have found out solutions so let me show how to handle it.
You should know the difference between git and github. github is one kind of git, and git have many website name such as gitlab, gitee… So there are the following two situations.</description>
			<content type="html"><![CDATA[<p>It’s quite easy if we only have one git account, then it became confusing when we want to add more account. I also met this problem. But I have found out solutions so let me show how to handle it.</p>
<p>You should know the difference between git and github. github is one kind of git, and git have many website name such as gitlab, gitee… So there are the following two situations. however you can consider it as other 2 situations: same email or not. P.S. Local environment will be automatically adjusted by user.name, user.email and repo url.</p>
<ul>
<li>different git website accounts
for example: a.github.com and b.gitlab.com</li>
<li>same git website accounts
for example: a.github.com and b.github.com</li>
</ul>
<h2 id="ssh">SSH</h2>
<p>In the beginning, there is a base knowledge we need to be aware of.
SSH is a authorization tool. It is a bridge connecting mutiple network servers. And abviously if we want to update a git repo, a trusted connection is needed. So we need to use SSH to generate public key and private key, and copy public key to website setting page. And add basic information of website to .ssh/config. So that we are trusted and can continue doing pull or push operations.</p>
<h3 id="let-generate-ssh-keys-for-different-emails">Let generate ssh keys for different emails</h3>
<p>Notice: email number = ssh key number
If github and gitlab is registered by same email, then it can use same ssh key. Otherwise you are supposed to create new ssh keys and add them to website setting page accordingly.</p>
<pre><code>ssh-keygen -t rsa -C &quot;CompanyEmailNameA@xxx.com&quot; -f ~/.ssh/company_name_rsa
ssh-keygen -t rsa -C &quot;SelfEmailNameA@xxx.com&quot; -f ~/.ssh/self_name_rsa
</code></pre><h3 id="update-different-ssh-keys-config">Update different ssh key’s config</h3>
<p>Accounts of different website:</p>
<pre><code>vi ~/.ssh/config

Host self_name
Hostname github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/company_name_rsa
User self_github_account_name
  
Host self_name
Hostname gitlab.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/self_name_rsa
User self_gitlab_account_name
</code></pre><p>Accounts of same website:</p>
<pre><code>vi ~/.ssh/config

Host company_name
Hostname github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/company_name_rsa
User company_github_account_name
  
Host self_name
Hostname github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/self_name_rsa
User self_github_account_name
</code></pre><h3 id="copy-public-key-to-website-setting-page">Copy public key to website setting page</h3>
<h2 id="git-config">Git config</h2>
<pre><code>git config user.name &quot;self_github_account_name&quot;
git config user.email SelfEmailNameA@xxx.com
</code></pre><p>That should be enough.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The process from one to many is the process of deepening understanding.</p>
]]></content>
		</item>
		
		<item>
			<title>Setup static github.io blog engined by hugo &amp; hermit on Mac</title>
			<link>https://func.fun/posts/blog_setup/</link>
			<pubDate>Fri, 12 Mar 2021 16:04:53 +0800</pubDate>
			
			<guid>https://func.fun/posts/blog_setup/</guid>
			<description>My thoughts I always wanted to setup a blog and keep updating the best practice which I learned from work(in eBay) and self study. It may be helpful by other peoples who met issue and clicked into this page. I would be very proud of this.
We used to search on the internet when we are facing issues. We keep digging and digging, trying again and again to resolve problems. A common case is many blogs are just pasted from anothor, that is very time wasting once we realised.</description>
			<content type="html"><![CDATA[<h2 id="my-thoughts">My thoughts</h2>
<p>I always wanted to setup a blog and keep updating the best practice which I learned from work(in eBay) and self study. It may be helpful by other peoples who met issue and clicked into this page. I would be very proud of this.</p>
<p>We used to search on the internet when we are facing issues. We keep digging and digging, trying again and again to resolve problems. A common case is many blogs are just pasted from anothor, that is very time wasting once we realised. So I will always write original blogs, and don’t forget the initial purpose.</p>
<p>Now let me begin recording my struggling blog build road. I had to say the quick_start part in hugo document is not friendly… The blank site on localhost:1313 drives me crazy..</p>
<h2 id="install-hugo">Install <code>hugo</code></h2>
<h3 id="hugo">hugo</h3>
<pre><code>brew install hugo
</code></pre><h2 id="create-site-and-add-your-favorate-theme">Create site and add your favorate theme</h2>
<p>create main folder by hugo new command.</p>
<pre><code>hugo new site your_site_name
</code></pre><p>cd your_site_name, then clone your favorate hugo them into themes/.</p>
<pre><code>cd your_site_name
git clone https://github.com/Track3/hermit.git themes/hermit
</code></pre><p>create some web pages in .md format, following commands will automatically generate subfolder names <em>posts</em> and <em>about</em>.</p>
<pre><code>hugo new posts/my-first-post.md
hugo new about/about.md
</code></pre><p>Ather this, hugo ducument says <code>hugo server -D</code>
But I saw nothing when opened http://localhost:1313/.
After a huge struggling, I finally saw the contents.</p>
<p>Needed actions are:</p>
<ol>
<li>Remove draft line in *.md you just created, hugo won’t deploy drafts unless you append this command <code>--buildDrafts</code>.
However, after I made change accordingly, website still is blank.</li>
<li>Copy <code>config.toml</code>  from your <code>themes/theme_name/exampleSite</code>folder to your site main folder. And modify some customer settings, I am only listing necessary parts:</li>
</ol>
<pre><code>baseURL = &quot;https://Thunsis.github.io&quot;
# your github.io url
theme = &quot;hermit&quot;
# them name
[menu]

  [[menu.main]]
    name = &quot;Posts&quot;
    url = &quot;posts/&quot;
    weight = 10

  [[menu.main]]
    name = &quot;About&quot;
    url = &quot;about/&quot;
    weight = 20
# menu stucture, need to be aligned with /content/ subfolders you created
</code></pre><p>Now you can see the website by, congratulations!</p>
<pre><code>hugo server -D
</code></pre><h2 id="deploy-to-github-repo">Deploy to github repo</h2>
<p>We have get blog ready in localhost, but there still a way to go.. Carry on!</p>
<h3 id="create-your_namegithubio-repo-and-configure-it">Create your_name.github.io repo and configure it</h3>
<p>I won’t go into details on creating repo names <code>your_name.github.io</code>, there is an important action need, which is to create a file names <code>.github/workflows/gh-pages.yml</code> under your just created repo. The content should be:</p>
<pre><code>name: github pages

on:
  push:
    branches:
      - main  # Set a branch to deploy

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          # extended: true

      - name: Build
        run: hugo --minify

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
</code></pre><h3 id="generate-static-files-and-push-to-repo">Generate static files and push to repo</h3>
<p>After this command, static files will be generated to hugo project subfolder names <em>public</em>. Which is the exact content we need to deploy to github repo.</p>
<pre><code>hugo
</code></pre><p>Now we push it into repo.</p>
<pre><code>cd public
git init
git remote add origin https://github.com/Thunsis/Thunsis.github.io.git
git config user.name &quot;self_github_account_name&quot;
git config user.email SelfEmailNameA@xxx.com
git pull
git checkout master
git branch --set-upstream-to=origin/master
git add .
git commit -a -m 'my blog'
git push -u origin master
</code></pre><p>See you blog on <code>http://your_name.github.io/</code>, cheers!</p>
<h2 id="conclusion">Conclusion</h2>
<h3 id="the-mosting-blocking-issues">The mosting blocking issues:</h3>
<ul>
<li>hugo document did not tell us to overwrite  <code>config.toml</code> by theme’s, which caused I can’t see the content.</li>
<li>Muti github account issue(personal issue). But I have found best solution, will post another blog to summary that. I think it could be helpful by some people, because most of us have company github account and personal github account both on same laptop.</li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
